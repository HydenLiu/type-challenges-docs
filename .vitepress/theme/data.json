[
  {
    "name": "Return Type",
    "alias": "return-type",
    "number": 2,
    "type": "medium",
    "badge": "",
    "describe": "ReturnType<T>: T函数返回值的类型"
  },
  {
    "name": "Omit",
    "alias": "omit",
    "number": 3,
    "type": "medium",
    "badge": "",
    "describe": "Omit<T, K>: 创建一个省略 K 中字段的 T 对象类型"
  },
  {
    "name": "Pick",
    "alias": "pick",
    "number": 4,
    "type": "easy",
    "badge": "",
    "describe": "Pick<T, k>: 创建一个从类型 T 中选择出属性 K的对象类型"
  },
  {
    "name": "Readonly Keys",
    "alias": "readonly-keys",
    "number": 5,
    "type": "extreme",
    "badge": "",
    "describe": "GetReadonlyKeys<T>: 把对象 T 所有只读属性的键 组成一个联合类型"
  },
  {
    "name": "Simple Vue",
    "alias": "simple-vue",
    "number": 6,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Readonly",
    "alias": "readonly",
    "number": 7,
    "type": "easy",
    "badge": "",
    "describe": "Readonly<T>: 将 T 所有属性变成只读的"
  },
  {
    "name": "Readonly 2",
    "alias": "readonly-2",
    "number": 8,
    "type": "medium",
    "badge": "",
    "describe": "MyReadonly2<T, K>: 将 T 中对应的 K 属性改为只读"
  },
  {
    "name": "Deep Readonly",
    "alias": "deep-readonly",
    "number": 9,
    "type": "medium",
    "badge": "",
    "describe": "DeepReadonly<T>: 将对象T的每个参数及其子对象都设为只读"
  },
  {
    "name": "Tuple To Union",
    "alias": "tuple-to-union",
    "number": 10,
    "type": "medium",
    "badge": "",
    "describe": "TupleToUnion<T>: 将元组T的每一项组成一个联合类型"
  },
  {
    "name": "Tuple To Object",
    "alias": "tuple-to-object",
    "number": 11,
    "type": "easy",
    "badge": "",
    "describe": "TupleToObject<T>: 将元组T的类型转为对象类型, key和value都对应元组的一项"
  },
  {
    "name": "Chainable Options",
    "alias": "chainable-options",
    "number": 12,
    "type": "medium",
    "badge": "",
    "describe": "可串联构造器, option(key, value)转为{[key]: value}, 会有多层的情况"
  },
  {
    "name": "First",
    "alias": "first",
    "number": 14,
    "type": "easy",
    "badge": "",
    "describe": "First<T>: 获取T里面第一个元素的类型"
  },
  {
    "name": "Last",
    "alias": "last",
    "number": 15,
    "type": "medium",
    "badge": "",
    "describe": "Last<T>: 获取最后一个元素的类型"
  },
  {
    "name": "Pop",
    "alias": "pop",
    "number": 16,
    "type": "medium",
    "badge": "",
    "describe": "Pop<T>: 返回一个去掉数组T的最后一个元素的数组"
  },
  {
    "name": "Currying 1",
    "alias": "currying-1",
    "number": 17,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Tuple Length",
    "alias": "tuple-length",
    "number": 18,
    "type": "easy",
    "badge": "",
    "describe": "Length<T>: 返回只读元组T的长度"
  },
  {
    "name": "Promise All",
    "alias": "promise-all",
    "number": 20,
    "type": "medium",
    "badge": "",
    "describe": "获取多个promise的返回值, 并组成一个数组"
  },
  {
    "name": "Exclude",
    "alias": "exclude",
    "number": 43,
    "type": "easy",
    "badge": "",
    "describe": "Exclude <T, U>: 联合类型T中排除U的类型成员, 然后构造一个新的类型"
  },
  {
    "name": "Union To Intersection",
    "alias": "union-to-intersection",
    "number": 55,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Get Required",
    "alias": "get-required",
    "number": 57,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Get Optional",
    "alias": "get-optional",
    "number": 59,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Type Lookup",
    "alias": "type-lookup",
    "number": 62,
    "type": "medium",
    "badge": "",
    "describe": "根据某个属性在联合类型中查找类型，如：LookUp<Dog | Cat, 'dog'>获得Dog"
  },
  {
    "name": "Required Keys",
    "alias": "required-keys",
    "number": 89,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Optional Keys",
    "alias": "optional-keys",
    "number": 90,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Trimleft",
    "alias": "trimleft",
    "number": 106,
    "type": "medium",
    "badge": "",
    "describe": "TrimLeft<T>: 去除T开头的空白字符串"
  },
  {
    "name": "Trim",
    "alias": "trim",
    "number": 108,
    "type": "medium",
    "badge": "",
    "describe": "Trim<T>: 去除T两边的空白字符串"
  },
  {
    "name": "Capitalize",
    "alias": "capitalize",
    "number": 110,
    "type": "medium",
    "badge": "",
    "describe": "Capitalize<T>: 首字母变为大写"
  },
  {
    "name": "Capitalizewords",
    "alias": "capitalizewords",
    "number": 112,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Camelcase",
    "alias": "camelcase",
    "number": 114,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Replace",
    "alias": "replace",
    "number": 116,
    "type": "medium",
    "badge": "",
    "describe": "Replace<S, From, To>: 将字符串 S 中的第一个子字符串 From 替换为 To"
  },
  {
    "name": "Replaceall",
    "alias": "replaceall",
    "number": 119,
    "type": "medium",
    "badge": "",
    "describe": "ReplaceAll<S, From, To>: 将字符串 S 中的所有子字符串 From 替换为 To"
  },
  {
    "name": "C Printf Parser",
    "alias": "c-printf-parser",
    "number": 147,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Query String Parser",
    "alias": "query-string-parser",
    "number": 151,
    "type": "extreme",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Awaited",
    "alias": "awaited",
    "number": 189,
    "type": "easy",
    "badge": "",
    "describe": "Promise<T>: Promise里返回T的类型"
  },
  {
    "name": "Append Argument",
    "alias": "append-argument",
    "number": 191,
    "type": "medium",
    "badge": "",
    "describe": "AppendArgument<Fn, A>: 返回一个拥有 Fn 的所有参数并在末尾追加类型 A 参数的函数类型"
  },
  {
    "name": "Vue Basic Props",
    "alias": "vue-basic-props",
    "number": 213,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Slice",
    "alias": "slice",
    "number": 216,
    "type": "extreme",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Isany",
    "alias": "isany",
    "number": 223,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "If",
    "alias": "if",
    "number": 268,
    "type": "easy",
    "badge": "",
    "describe": "If<B, T, F>: B为true则返回T, false返回F"
  },
  {
    "name": "Typed Get",
    "alias": "typed-get",
    "number": 270,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Integers Comparator",
    "alias": "integers-comparator",
    "number": 274,
    "type": "extreme",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Permutation",
    "alias": "permutation",
    "number": 296,
    "type": "medium",
    "badge": "",
    "describe": "Permutation<T>: 实现联合类型 T 的全排列，将联合类型转换成所有可能的全排列数组的联合类型。"
  },
  {
    "name": "Length Of String",
    "alias": "length-of-string",
    "number": 298,
    "type": "medium",
    "badge": "",
    "describe": "LengthOfString<T>: 计算字符串T的长度，类似于 String#length"
  },
  {
    "name": "String To Number",
    "alias": "string-to-number",
    "number": 300,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Tuple Filter",
    "alias": "tuple-filter",
    "number": 399,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Flatten",
    "alias": "flatten",
    "number": 459,
    "type": "medium",
    "badge": "",
    "describe": "Flatten<T>: 扁平化 T 这个多维数组"
  },
  {
    "name": "Currying 2",
    "alias": "currying-2",
    "number": 462,
    "type": "extreme",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Tuple To Enum Object",
    "alias": "tuple-to-enum-object",
    "number": 472,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Sum",
    "alias": "sum",
    "number": 476,
    "type": "extreme",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Multiply",
    "alias": "multiply",
    "number": 517,
    "type": "extreme",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Append To Object",
    "alias": "append-to-object",
    "number": 527,
    "type": "medium",
    "badge": "",
    "describe": "AppendToObject<T, U, V>: 给对象T添加一个属性, 属性名为U, 属性值为V"
  },
  {
    "name": "Absolute",
    "alias": "absolute",
    "number": 529,
    "type": "medium",
    "badge": "",
    "describe": "Absolute<T>: 返回一个T的绝对值的字符串类型"
  },
  {
    "name": "String To Union",
    "alias": "string-to-union",
    "number": 531,
    "type": "medium",
    "badge": "",
    "describe": "StringToUnion<T>: 将字符串 T 的每个字符转换成联合类型"
  },
  {
    "name": "Concat",
    "alias": "concat",
    "number": 533,
    "type": "easy",
    "badge": "",
    "describe": "Concat<T, U>: 将两个数组类型 T 和 U 连接成一个数组类型"
  },
  {
    "name": "Printf",
    "alias": "printf",
    "number": 545,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Deep Object To Unique",
    "alias": "deep-object-to-unique",
    "number": 553,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Merge",
    "alias": "merge",
    "number": 599,
    "type": "medium",
    "badge": "",
    "describe": "Merge<T, U>: 将两个类型合并成一个类型，第二个类型的键会覆盖第一个类型的键"
  },
  {
    "name": "Kebabcase",
    "alias": "kebabcase",
    "number": 612,
    "type": "medium",
    "badge": "",
    "describe": "KebabCase<T>: 将字符串T转换成中划线连接的小写字符串"
  },
  {
    "name": "Diff",
    "alias": "diff",
    "number": 645,
    "type": "medium",
    "badge": "",
    "describe": "Diff<T, U>: 获取两个接口类型中的差值属性"
  },
  {
    "name": "Length Of String 2",
    "alias": "length-of-string-2",
    "number": 651,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Tag",
    "alias": "tag",
    "number": 697,
    "type": "extreme",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Union To Tuple",
    "alias": "union-to-tuple",
    "number": 730,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Inclusive Range",
    "alias": "inclusive-range",
    "number": 734,
    "type": "extreme",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Sort",
    "alias": "sort",
    "number": 741,
    "type": "extreme",
    "badge": "",
    "describe": ""
  },
  {
    "name": "String Join",
    "alias": "string-join",
    "number": 847,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Distributeunions",
    "alias": "distributeunions",
    "number": 869,
    "type": "extreme",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Includes",
    "alias": "includes",
    "number": 898,
    "type": "easy",
    "badge": "",
    "describe": "Includes<T, U>: 实现Array.includes方法, U 是否在 T 内"
  },
  {
    "name": "Assert Array Index",
    "alias": "assert-array-index",
    "number": 925,
    "type": "extreme",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Anyof",
    "alias": "anyof",
    "number": 949,
    "type": "medium",
    "badge": "",
    "describe": "AnyOf<T>: 数组 T 中任意一个值为真，则返回 true，否则返回 false"
  },
  {
    "name": "Deeppick",
    "alias": "deeppick",
    "number": 956,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Isnever",
    "alias": "isnever",
    "number": 1042,
    "type": "medium",
    "badge": "",
    "describe": "IsNever<T>: 判断 T 是否为 never 类型"
  },
  {
    "name": "Isunion",
    "alias": "isunion",
    "number": 1097,
    "type": "medium",
    "badge": "",
    "describe": "IsUnion<T>: 判断 T 是否为联合类型"
  },
  {
    "name": "Replacekeys",
    "alias": "replacekeys",
    "number": 1130,
    "type": "medium",
    "badge": "",
    "describe": "ReplaceKeys<T, U, Y>: 将 T 中U的键替换成Y"
  },
  {
    "name": "Pinia",
    "alias": "pinia",
    "number": 1290,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Remove Index Signature",
    "alias": "remove-index-signature",
    "number": 1367,
    "type": "medium",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Camelize",
    "alias": "camelize",
    "number": 1383,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Percentage Parser",
    "alias": "percentage-parser",
    "number": 1978,
    "type": "medium",
    "badge": "",
    "describe": "PercentageParser<T>, 返回[正负号, 数字, 单位]格式的类型, 没有则返回空字符串"
  },
  {
    "name": "Drop String",
    "alias": "drop-string",
    "number": 2059,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Drop Char",
    "alias": "drop-char",
    "number": 2070,
    "type": "medium",
    "badge": "",
    "describe": "DropChar<S, C>: 从字符串S中剔除所有的字符C"
  },
  {
    "name": "Minusone",
    "alias": "minusone",
    "number": 2257,
    "type": "medium",
    "badge": "",
    "describe": "MinusOne<T>: 返回数字类型T减去1的类型"
  },
  {
    "name": "Pickbytype",
    "alias": "pickbytype",
    "number": 2595,
    "type": "medium",
    "badge": "",
    "describe": "PickByType<T, U>: 在T中找出属性值和U类型一样的"
  },
  {
    "name": "Startswith",
    "alias": "startswith",
    "number": 2688,
    "type": "medium",
    "badge": "",
    "describe": "StartsWith<T, U>: T的开头是否是U,返回true或者false"
  },
  {
    "name": "Endswith",
    "alias": "endswith",
    "number": 2693,
    "type": "medium",
    "badge": "",
    "describe": "Endswith<T, U>: T的结尾是否是U,返回true或者false"
  },
  {
    "name": "Partialbykeys",
    "alias": "partialbykeys",
    "number": 2757,
    "type": "medium",
    "badge": "",
    "describe": "PartialByKeys<T, K> 将对象类型T里面键和K相同的改为可选项"
  },
  {
    "name": "Requiredbykeys",
    "alias": "requiredbykeys",
    "number": 2759,
    "type": "medium",
    "badge": "",
    "describe": "RequiredByKeys<T, K> 将对象类型T里面键和K相同的改为必选项"
  },
  {
    "name": "Mutable",
    "alias": "mutable",
    "number": 2793,
    "type": "medium",
    "badge": "",
    "describe": " Mutable<T>: 将T中的每一项只读都去掉, 变成可写"
  },
  {
    "name": "Split",
    "alias": "split",
    "number": 2822,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Classpublickeys",
    "alias": "classpublickeys",
    "number": 2828,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Omitbytype",
    "alias": "omitbytype",
    "number": 2852,
    "type": "medium",
    "badge": "",
    "describe": "OmitByType<T, U>: 在T中找出属性值和U类型不一样的类型"
  },
  {
    "name": "Isrequiredkey",
    "alias": "isrequiredkey",
    "number": 2857,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Objectentries",
    "alias": "objectentries",
    "number": 2946,
    "type": "medium",
    "badge": "",
    "describe": "ObjectEntries<T>: 实现像js的Object.entries一样的类型"
  },
  {
    "name": "Objectfromentries",
    "alias": "objectfromentries",
    "number": 2949,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Push",
    "alias": "push",
    "number": 3057,
    "type": "easy",
    "badge": "",
    "describe": "Push<T, U>: 实现Array.push一样的类型, 将U添加到T的末尾"
  },
  {
    "name": "Unshift",
    "alias": "unshift",
    "number": 3060,
    "type": "easy",
    "badge": "",
    "describe": "unshift<T, U>: 实现Array.unshift一样的类型, 将U添加到T的开头"
  },
  {
    "name": "Shift",
    "alias": "shift",
    "number": 3062,
    "type": "medium",
    "badge": "",
    "describe": "Shift<T>: 实现Array.shift一样类型的, 将T的第一个元素去掉"
  },
  {
    "name": "Tuple To Nested Object",
    "alias": "tuple-to-nested-object",
    "number": 3188,
    "type": "medium",
    "badge": "",
    "describe": "TupleToNestedObject<T, U>: 给出一个只包含字符串类型的元组类型T,和一个类型U,递归地建立一个对象。"
  },
  {
    "name": "Reverse",
    "alias": "reverse",
    "number": 3192,
    "type": "medium",
    "badge": "",
    "describe": "Reverse<T>: 实现类型版本的数组反转 Array.reverse"
  },
  {
    "name": "Flip Arguments",
    "alias": "flip-arguments",
    "number": 3196,
    "type": "medium",
    "badge": "",
    "describe": "FlipArguments<T>: 类型需要函数类型T,并返回一个新的函数类型,它的返回类型与T相同,但参数相反"
  },
  {
    "name": "Flattendepth",
    "alias": "flattendepth",
    "number": 3243,
    "type": "medium",
    "badge": "",
    "describe": "FlattenDepth<T, S>: 递归扁平化数组T, 最多可扁平化深度次数为S, 默认1次。"
  },
  {
    "name": "Parameters",
    "alias": "parameters",
    "number": 3312,
    "type": "easy",
    "badge": "",
    "describe": "Parameters<T>: 获取函数T的参数类型"
  },
  {
    "name": "Bem Style String",
    "alias": "bem-style-string",
    "number": 3326,
    "type": "medium",
    "badge": "",
    "describe": "BEM<B, E, M>: 生成字符串, B是一个字符串字面,E(__)和M(--)是字符串数组"
  },
  {
    "name": "Inordertraversal",
    "alias": "inordertraversal",
    "number": 3376,
    "type": "medium",
    "badge": "",
    "describe": "InorderTraversal<T>: 实现二叉树中序遍历的类型版本"
  },
  {
    "name": "Ispalindrome",
    "alias": "ispalindrome",
    "number": 4037,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Flip",
    "alias": "flip",
    "number": 4179,
    "type": "medium",
    "badge": "",
    "describe": "Flip<T>: 将对象类型T的键和值进行调换"
  },
  {
    "name": "Fibonacci Sequence",
    "alias": "fibonacci-sequence",
    "number": 4182,
    "type": "medium",
    "badge": "",
    "describe": "Fibonacci<T>: 斐波那契序列, 返回第T个数字"
  },
  {
    "name": "Nomiwase",
    "alias": "nomiwase",
    "number": 4260,
    "type": "medium",
    "badge": "",
    "describe": "AllCombinations<S>: 返回 S 中的字符的所有字符串排列组合。"
  },
  {
    "name": "Greater Than",
    "alias": "greater-than",
    "number": 4425,
    "type": "medium",
    "badge": "",
    "describe": "GreaterThan<T, U>: T是否大于U, 返回boolean值"
  },
  {
    "name": "Zip",
    "alias": "zip",
    "number": 4471,
    "type": "medium",
    "badge": "",
    "describe": "Zip<[1, 2], [true, false]>: 导出[[1, true], [2, false]]"
  },
  {
    "name": "Istuple",
    "alias": "istuple",
    "number": 4484,
    "type": "medium",
    "badge": "",
    "describe": "IsTuple<T>: 判断是否是元组, 返回boolean值"
  },
  {
    "name": "Chunk",
    "alias": "chunk",
    "number": 4499,
    "type": "medium",
    "badge": "",
    "describe": "Chunk<T, U>: 实现lodash里面的Chunk方法"
  },
  {
    "name": "Fill",
    "alias": "fill",
    "number": 4518,
    "type": "medium",
    "badge": "",
    "describe": "Fill<T, N, Start?, End?>: 实现js Array的fill方法"
  },
  {
    "name": "Trim Right",
    "alias": "trim-right",
    "number": 4803,
    "type": "medium",
    "badge": "",
    "describe": "TrimRight<T>: 删除T结尾的空白字符串"
  },
  {
    "name": "Without",
    "alias": "without",
    "number": 5117,
    "type": "medium",
    "badge": "",
    "describe": "Without<T, U>: 实现Lodash.without, T 中去掉 U 中的元素"
  },
  {
    "name": "Trunc",
    "alias": "trunc",
    "number": 5140,
    "type": "medium",
    "badge": "",
    "describe": "Trunc<T>: 实现Math.trunc, 去掉小数部分, 获得整数部分"
  },
  {
    "name": "Indexof",
    "alias": "indexof",
    "number": 5153,
    "type": "medium",
    "badge": "",
    "describe": "IndexOf<T, U>: 实现Array.indexOf, 找出 U 在 T 里面第一次出现的下标"
  },
  {
    "name": "Mutable Keys",
    "alias": "mutable-keys",
    "number": 5181,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Join",
    "alias": "join",
    "number": 5310,
    "type": "medium",
    "badge": "",
    "describe": "Join<T, U>: 实现Array.join, 将数组T转为字符串,用U分割"
  },
  {
    "name": "Lastindexof",
    "alias": "lastindexof",
    "number": 5317,
    "type": "medium",
    "badge": "",
    "describe": "LastIndexOf<T, U>: 实现Array.lastIndexOf, 找出 U 在 T 里面最后一次出现的下标"
  },
  {
    "name": "Unique",
    "alias": "unique",
    "number": 5360,
    "type": "medium",
    "badge": "",
    "describe": "Unique<T>: 数组类型 T 去重"
  },
  {
    "name": "Intersection",
    "alias": "intersection",
    "number": 5423,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Maptypes",
    "alias": "maptypes",
    "number": 5821,
    "type": "medium",
    "badge": "",
    "describe": "MapTypes<T, R>: 对象 T 中的类型转换为类型 R 结构定义的不同类型"
  },
  {
    "name": "Binary To Decimal",
    "alias": "binary-to-decimal",
    "number": 6141,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Json Parser",
    "alias": "json-parser",
    "number": 6228,
    "type": "extreme",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Object Key Paths",
    "alias": "object-key-paths",
    "number": 7258,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Construct Tuple",
    "alias": "construct-tuple",
    "number": 7544,
    "type": "medium",
    "badge": "",
    "describe": "ConstructTuple<T>: 构造长度为 T 的元组"
  },
  {
    "name": "Subtract",
    "alias": "subtract",
    "number": 7561,
    "type": "extreme",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Number Range",
    "alias": "number-range",
    "number": 8640,
    "type": "medium",
    "badge": "",
    "describe": "NumberRange<L, H>: 返回数字 L 到 H 之前的联合类型"
  },
  {
    "name": "Combination",
    "alias": "combination",
    "number": 8767,
    "type": "medium",
    "badge": "",
    "describe": "Combination<T>: 给定一个字符串数组 T ，返回它的进行排列组合"
  },
  {
    "name": "Two Sum",
    "alias": "two-sum",
    "number": 8804,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Subsequence",
    "alias": "subsequence",
    "number": 8987,
    "type": "medium",
    "badge": "",
    "describe": "Subsequence<T>: 给定一个数组 T，返回所有可能的子序列"
  },
  {
    "name": "CheckRepeatedChars",
    "alias": "CheckRepeatedChars",
    "number": 9143,
    "type": "medium",
    "badge": "",
    "describe": "CheckRepeatedChars<T>: 判断一个 string 类型中是否有相同的字符, 返回 true 或 false"
  },
  {
    "name": "Validdate",
    "alias": "validdate",
    "number": 9155,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Assign",
    "alias": "assign",
    "number": 9160,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Firstuniquecharindex",
    "alias": "firstuniquecharindex",
    "number": 9286,
    "type": "medium",
    "badge": "",
    "describe": "FirstUniqueCharIndex<T>: 给定一个字符串 T，找到其中的第一个非重复字符并返回它的索引。如果不存在，返回-1。"
  },
  {
    "name": "Maximum",
    "alias": "maximum",
    "number": 9384,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Capitalize Nest Object Keys",
    "alias": "capitalize-nest-object-keys",
    "number": 9775,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Get Middle Element",
    "alias": "get-middle-element",
    "number": 9896,
    "type": "medium",
    "badge": "",
    "describe": "GetMiddleElement<T>: 给定一个数组类型，返回他的中间类型"
  },
  {
    "name": "Appear only once",
    "alias": "zhao-chu-mu-biao-shu-zu-zhong-zhi-chu-xian-guo-yi-ci-de-yuan-su",
    "number": 9898,
    "type": "medium",
    "badge": "",
    "describe": "FindEles<T>: 找出目标数组中只出现过一次的元素"
  },
  {
    "name": "Integer",
    "alias": "integer",
    "number": 10969,
    "type": "medium",
    "badge": "",
    "describe": "Integer<T>: 类型 T 继承于 number, 如果 T 是一个整数则返回它，否则返回 never。"
  },
  {
    "name": "Replace Union",
    "alias": "replace-union",
    "number": 13580,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Fizzbuzz",
    "alias": "fizzbuzz",
    "number": 14080,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Run Length Encoding",
    "alias": "run-length-encoding",
    "number": 14188,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "Tree Path Array",
    "alias": "tree-path-array",
    "number": 15260,
    "type": "hard",
    "badge": "",
    "describe": ""
  },
  {
    "name": "To Primitive",
    "alias": "to-primitive",
    "number": 16259,
    "type": "medium",
    "badge": "",
    "describe": "ToPrimitive<T>: 将类型为字面类型（标签类型）的属性，转换为基本类型。"
  },
  {
    "name": "Deepmutable",
    "alias": "deepmutable",
    "number": 17973,
    "type": "medium",
    "badge": "",
    "describe": "DeepMutable<T>: 递归类型T, 将类型T的子属性改为可变（去掉readonly）类型"
  },
  {
    "name": "All",
    "alias": "all",
    "number": 18142,
    "type": "medium",
    "badge": "",
    "describe": "All<T>: 元组 T 里面每个类型是不是一样的"
  },
  {
    "name": "Filter",
    "alias": "filter",
    "number": 18220,
    "type": "medium",
    "badge": "",
    "describe": "Filter<T, P>: 类似于JS的Array里的filter方法"
  },
  {
    "name": "Snakecase",
    "alias": "snakecase",
    "number": 19458,
    "type": "hard",
    "badge": "",
    "describe": ""
  }
]
